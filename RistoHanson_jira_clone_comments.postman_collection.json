{
	"info": {
		"_postman_id": "8a66a018-c3ed-4625-ac77-7170c05244c2",
		"name": "RistoHanson_jira_clone_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29691174"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get authentication token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"token\", jsonData.authToken);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/authentication/guest",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"guest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"project_id\", jsonData.project.id);\r",
									"pm.globals.set(\"user_id1\", jsonData.project.users[0].id);\r",
									"pm.globals.set(\"user_id2\", jsonData.project.users[1].id);\r",
									"pm.globals.set(\"user_id3\", jsonData.project.users[2].id);\r",
									"\r",
									"pm.test(\"Retrieving project information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user id into variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.globals.set(\"current_user_id\", jsonData.currentUser.id);\r",
									"\r",
									"pm.test(\"Retrieving user information was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/currentUser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"currentUser"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Post issue",
			"item": [
				{
					"name": "Create issue (pre-requisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    console.log('projectId:', pm.globals.get(\"project_id\"));\r",
									"    console.log('jsonData.issue.projectId:', jsonData.issue.projectId);\r",
									"    \r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.be.oneOf([\r",
									"       pm.globals.get(\"user_id1\"),\r",
									"       pm.globals.get(\"user_id2\"),\r",
									"       pm.globals.get(\"user_id3\")\r",
									"    ]);\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 1st comment 1.2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"comment1_id\", jsonData.comment.id);\r",
									"pm.globals.set(\"comment1_body\", jsonData.comment.body);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved successfully\", function () {\r",
									"    pm.expect(jsonData.comment.userId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"     pm.expect(jsonData.comment.issueId).to.eql(pm.globals.get(\"issue_id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"body\": \"First comment\",\r\n    \"issueId\": {{issue_id}},\r\n    \"userId\": {{current_user_id}}\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 2nd comment 1.3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"comment2_id\", jsonData.comment.id);\r",
									"pm.globals.set(\"comment2_body\", jsonData.comment.body);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved successfully\", function () {\r",
									"    pm.expect(jsonData.comment.userId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"     pm.expect(jsonData.comment.issueId).to.eql(pm.globals.get(\"issue_id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"body\": \"Second comment\",\r\n    \"issueId\": {{issue_id}},\r\n    \"userId\": {{current_user_id}}\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment with missing 'body' field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.data.fields.body).to.eql(\"This field is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"issueId\": \"{{issue_id}}\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment with missing 'userId' field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Something went wrong, please contact our support.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Comment\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment with missing 'issueId' field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Something went wrong, please contact our support.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Comment\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment with special symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains special symbols and Cyrillic letters\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"Comment with special symbols and Cyrillic letters ЯБГД ¤%&/¤!%¤# абвгдеёж\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"Comment with special symbols and Cyrillic letters ЯБГД ¤%&/¤!%¤# абвгдеёж\",\r\n    \"userId\": \"{{current_user_id}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET issue details are OK\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									"\r",
									"pm.test(\"Check if both comments are under issue\", function () {\r",
									"    pm.expect(jsonData.issue.comments[0].id).to.eql(pm.globals.get(\"comment1_id\"))\r",
									"    pm.expect(jsonData.issue.comments[1].id).to.eql(pm.globals.get(\"comment2_id\"))\r",
									"\r",
									"    pm.expect(jsonData.issue.comments[0].body).to.eql(pm.globals.get(\"comment1_body\"))\r",
									"    pm.expect(jsonData.issue.comments[1].body).to.eql(pm.globals.get(\"comment2_body\"))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get created issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//save received response to current test variable\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//retrieve globals variable\r",
									"console.log(\"We are checking issue \" + pm.globals.get(\"issue_id\"));\r",
									"\r",
									"pm.test(\"Get request was successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was retrieved correctly\", function () {\r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    //copy here all validations from previous POST request\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update comment",
			"item": [
				{
					"name": "Create issue (pre-requisite)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"update_issue_id\", jsonData.issue.id);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Check that information was saved correctly\", function () {\r",
									"    console.log('projectId:', pm.globals.get(\"project_id\"));\r",
									"    console.log('jsonData.issue.projectId:', jsonData.issue.projectId);\r",
									"    \r",
									"    pm.expect(jsonData.issue.title).to.eql(\"Issue title\");\r",
									"    pm.expect(jsonData.issue.type).to.eql(\"task\");\r",
									"    pm.expect(jsonData.issue.status).to.eql(\"backlog\");\r",
									"    pm.expect(jsonData.issue.priority).to.eql(\"3\");\r",
									"    pm.expect(jsonData.issue.description).to.eql(\"Issue description\");\r",
									"    pm.expect(jsonData.issue.projectId).to.eql(pm.globals.get(\"project_id\"));\r",
									"    pm.expect(jsonData.issue.reporterId).to.eql(pm.globals.get(\"current_user_id\"));\r",
									"\r",
									"    pm.expect(jsonData.issue.users[0].id).to.be.oneOf([\r",
									"       pm.globals.get(\"user_id1\"),\r",
									"       pm.globals.get(\"user_id2\"),\r",
									"       pm.globals.get(\"user_id3\")\r",
									"    ]);\r",
									"\r",
									"    pm.expect(jsonData.issue.estimate).to.eql(null);\r",
									"    pm.expect(jsonData.issue.createdAt).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"task\",\r\n    \"title\": \"Issue title\",\r\n    \"description\": \"Issue description\",\r\n    \"reporterId\": {{current_user_id}},\r\n    \"priority\": \"3\",\r\n    \"status\": \"backlog\",\r\n    \"projectId\": {{project_id}},\r\n    \"users\": [\r\n        {\r\n            \"id\": {{user_id1}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"update_comment_id\", jsonData.comment.id);\r",
									"pm.globals.set(\"update_comment_body\", jsonData.comment.body);\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImlhdCI6MTY2MTg4ODg2NSwiZXhwIjoxNjc3NDQwODY1fQ.xBCXkyIvbEe6yW1l079gPqZjt0indGDLBvyUG9n_0es"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"body\": \"First comment\",\r\n    \"issueId\": {{update_issue_id}},\r\n    \"userId\": {{current_user_id}}\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Issue creation was successful\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									"\r",
									"pm.test(\"Check that comment was updated successfully\", function () {\r",
									"    pm.expect(jsonData.comment.body).to.eql(\"This is now edited couple of times\");\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is now edited couple of times\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{update_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{update_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment with non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.deep.eql(\"Comment not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is non-existing id comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/1234567890",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"1234567890"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment with deleted comment id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.deep.equal(\"Comment not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This is comment with deleted comment id\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/1992891",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"1992891"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Update) Test when body is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Comment not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"issueId\": \"{{issue_id}}\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{update_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{update_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Update) Test when userId is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Comment not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{update_comment_body}}\",\r\n    \"issueId\": \"{{issue_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{update_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{update_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Update) Test when issueId is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be error\", function () {\r",
									"    pm.response.to.be.error;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Comment not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"{{update_comment_body}}\",\r\n    \"userId\": \"{{current_user_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{update_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{update_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"GET issue details are OK\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.status(200);  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/{{update_issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"{{update_issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete comment",
			"item": [
				{
					"name": "Delete comment",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/{{update_comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{update_comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment with invalid comment id format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Something went wrong, please contact our support.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/ThisIsDeletionWithInvalidCommentId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"ThisIsDeletionWithInvalidCommentId"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment with no authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Authentication token not found.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/1992891",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"1992891"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjY2Mjk1NSwiaWF0IjoxNzAwODI5MDA0LCJleHAiOjE3MTYzODEwMDR9.Z5yZ84Cy0evon9IjgL8LpuFeXgxqqJsVOGqsQBrH2gs",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jira-api.ivorreic.com",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "https://jira-api.ivorreic.com"
		},
		{
			"key": "issueId",
			"value": "713271"
		},
		{
			"key": "1804775",
			"value": "1804775"
		},
		{
			"key": "token",
			"value": "AUTH_TOKEN",
			"type": "string"
		}
	]
}